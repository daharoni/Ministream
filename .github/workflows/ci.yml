name: Ministream CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10']
        component: [edge_node, network_api, gui, shared, root]

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements/base.txt
        pip install -r requirements/test.txt
        pip install -r requirements/ci.txt
        if [ -f ${{ matrix.component }}/requirements.txt ]; then pip install -r ${{ matrix.component }}/requirements.txt; fi

    - name: List installed packages
      run: pip list

    - name: Lint with flake8
      run: |
        if [ "${{ matrix.component }}" != "root" ]; then
          # stop the build if there are Python syntax errors or undefined names
          flake8 ${{ matrix.component }} --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings
          flake8 ${{ matrix.component }} --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        else
          # For root, lint all Python files in the project
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        fi

    - name: Run tests with pytest and generate coverage
      run: |
        echo "Current working directory: $(pwd)"
        echo "Contents of current directory:"
        ls -la
        
        if [ "${{ matrix.component }}" == "root" ]; then
          echo "Running tests for root component"
          pytest --cov=. --cov-report=xml:./coverage.xml -v
        elif [ -d "${{ matrix.component }}/tests" ]; then
          echo "Running tests for ${{ matrix.component }} component"
          pytest ${{ matrix.component }}/tests --cov=${{ matrix.component }}/src --cov-report=xml:./coverage.xml -v
        else
          echo "No tests directory found for ${{ matrix.component }}, creating dummy coverage file"
          echo '<?xml version="1.0" ?><coverage version="5.5.0"></coverage>' > coverage.xml
        fi
        
        echo "After running tests, contents of current directory:"
        ls -la
        
        if [ -f coverage.xml ]; then
          echo "coverage.xml file found. Contents:"
          cat coverage.xml
        else
          echo "coverage.xml file not found!"
        fi

    - name: Debug coverage file
      run: |
        echo "Current working directory: $(pwd)"
        echo "Contents of current directory:"
        ls -la
        if [ -f coverage.xml ]; then
          echo "coverage.xml file found. Contents:"
          cat coverage.xml
        else
          echo "coverage.xml file not found!"
        fi

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        env_vars: OS,PYTHON
        name: codecov-umbrella
        fail_ci_if_error: true

    - name: Check for coverage file
      run: |
        if [ -f coverage.xml ]; then
          echo "coverage.xml file found"
        else
          echo "coverage.xml file not found, creating dummy file"
          echo '<?xml version="1.0" ?><coverage version="5.5.0"></coverage>' > coverage.xml
        fi

  docker-build:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    strategy:
      matrix:
        component: [edge_node, network_api]

    steps:
    - uses: actions/checkout@v2

    - name: Build Docker image
      run: |
        docker build -t edgeneurostream-${{ matrix.component }}:${{ github.sha }} ${{ matrix.component }}

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Push Docker image
      run: |
        docker push ghcr.io/${{ github.repository }}/edgeneurostream-${{ matrix.component }}:${{ github.sha }}
